diff --git a/examples/skeleton/basicfwd.c b/examples/skeleton/basicfwd.c
index c89822c..1cb601d 100644
--- a/examples/skeleton/basicfwd.c
+++ b/examples/skeleton/basicfwd.c
@@ -38,6 +38,8 @@
 #include <rte_cycles.h>
 #include <rte_lcore.h>
 #include <rte_mbuf.h>
+#include <rte_hash.h>
+#include <rte_ip.h>
 
 #define RX_RING_SIZE 128
 #define TX_RING_SIZE 512
@@ -46,6 +48,9 @@
 #define MBUF_CACHE_SIZE 250
 #define BURST_SIZE 32
 
+uint32_t num_flows = 1 << 16;
+struct rte_hash *my_h;
+
 static const struct rte_eth_conf port_conf_default = {
 	.rxmode = { .max_rx_pkt_len = ETHER_MAX_LEN }
 };
@@ -110,6 +115,94 @@ port_init(uint8_t port, struct rte_mempool *mbuf_pool)
 }
 
 /*
+ * Create the hash table that will contain the flows that
+ * the node will handle, which will be used to decide if packet
+ * is transmitted or dropped.
+ */
+static struct rte_hash *
+create_hash_table(uint32_t num_flows)
+{
+	struct rte_hash *h;
+
+	/* create table */
+	struct rte_hash_parameters hash_params = {
+		.entries = num_flows, /* table load = 50% */
+		.key_len = sizeof(uint32_t), /* Store IPv4 dest IP address */
+		.socket_id = rte_socket_id(),
+		.hash_func_init_val = 0,
+	};
+
+	hash_params.name = "my_hash_table";
+	h = rte_hash_create(&hash_params);
+
+	if (h == NULL)
+		rte_exit(EXIT_FAILURE,
+				"Problem creating the hash table\n");
+	return h;
+}
+
+static void
+populate_hash_table(const struct rte_hash *h, uint32_t num_flows)
+{
+	unsigned int i;
+	int32_t ret;
+	uint32_t ip_dst;
+	uint32_t num_flows_node = 0;
+
+	/* Add flows in table */
+	for (i = 0; i < num_flows; i++) {
+		if (i & 1)
+			continue;
+
+		ip_dst = rte_cpu_to_be_32(i);
+
+		ret = rte_hash_add_key(h, (void *) &ip_dst);
+		if (ret < 0)
+			rte_exit(EXIT_FAILURE, "Unable to add entry %u in hash table\n", i);
+		else
+			num_flows_node++;
+
+	}
+
+	printf("Hash table: Adding %u keys\n", num_flows_node);
+}
+
+static inline unsigned
+handle_packets(struct rte_hash *h, struct rte_mbuf **bufs, uint16_t num_packets)
+{
+	struct ipv4_hdr *ipv4_hdr;
+	uint32_t ipv4_dst_ip[BURST_SIZE];
+	const void *key_ptrs[BURST_SIZE];
+	unsigned int i,j;
+	int32_t positions[BURST_SIZE] = {0};
+
+	for (i = 0; i < num_packets; i++) {
+		/* Handle IPv4 header.*/
+		ipv4_hdr = rte_pktmbuf_mtod_offset(bufs[i], struct ipv4_hdr *,
+				sizeof(struct ether_hdr));
+		ipv4_dst_ip[i] = ipv4_hdr->dst_addr;
+		key_ptrs[i] = &ipv4_dst_ip[i];
+	}
+	/* Check if packets belongs to any flows handled by this node */
+	rte_hash_lookup_bulk(h, key_ptrs, num_packets, positions);
+
+	for (i = 0, j = 0; i < num_packets; i++) {
+		if (unlikely(positions[i] < 0)) {
+			/* Drop packet, as flow is not handled by this node */
+			rte_pktmbuf_free(bufs[i]);
+		}
+		else{
+			/*Over-write*/
+			bufs[j] = bufs[i];
+			j++;
+		}
+	}
+
+	return j;
+
+}
+
+/*
  * The lcore main. This is the main thread that does the work, reading from
  * an input port and writing to an output port.
  */
@@ -150,9 +243,12 @@ lcore_main(void)
 			if (unlikely(nb_rx == 0))
 				continue;
 
+			/* Whitelist */
+			const uint16_t valid_pkts = handle_packets(my_h, bufs, nb_rx);
+
 			/* Send burst of TX packets, to second port of pair. */
 			const uint16_t nb_tx = rte_eth_tx_burst(port ^ 1, 0,
-					bufs, nb_rx);
+					bufs, valid_pkts);
 
 			/* Free any unsent packets. */
 			if (unlikely(nb_tx < nb_rx)) {
@@ -204,6 +300,11 @@ main(int argc, char *argv[])
 	if (rte_lcore_count() > 1)
 		printf("\nWARNING: Too many lcores enabled. Only 1 used.\n");
 
+
+	/* Create and populate the hash table*/
+	my_h = create_hash_table(num_flows);
+	populate_hash_table(my_h, num_flows);
+
 	/* Call lcore_main on the master core only. */
 	lcore_main();
 
